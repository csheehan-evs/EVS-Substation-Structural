Function GetPlateWeight(shapeID As String, lengthStr As Variant) As Double
    Dim thickness As Double, width As Double, length As Double
    Dim xPosition As Long

    ' For plate like "PL 1'-3"X3/4"" or "PL 1'-6"X7/8"BENT":
    ' width = 1'-3" (the part between "PL " and "X")
    ' thickness = 3/4" or 7/8" (the part after "X" before any other text)

    ' Extract width (between "PL " and "X")
    Dim widthPart As String
    xPosition = InStr(UCase(shapeID), "X")
    If Left(shapeID, 2) = "PL" And xPosition > 0 Then
        widthPart = Mid(shapeID, 3, xPosition - 3)
        width = ParseMeasurement(widthPart)
    Else
        width = 0
    End If

    ' Extract thickness (after "X", ignoring subsequent text)
    Dim thicknessPart As String
    If xPosition > 0 Then
        ' Find the first non-numeric or non-fraction character after "X"
        Dim i As Long
        thicknessPart = Mid(shapeID, xPosition + 1)
        For i = 1 To Len(thicknessPart)
            Select Case Mid(thicknessPart, i, 1)
                Case "0" To "9", "/", "-", "."
                    ' Keep going
                Case Else
                    thicknessPart = Left(thicknessPart, i - 1)
                    Exit For
            End Select
        Next i
        thickness = ParseMeasurement(thicknessPart)
    Else
        thickness = 0
    End If

    ' Parse length from column D
    length = ParseMeasurement(CStr(lengthStr))

    ' Steel plate weight calculation: 0.284 lbs per cubic inch
    GetPlateWeight = thickness * width * length * 0.284
End Function
Function GetShapeWeight(shapeID As String, lengthStr As String, callingSheetName As String, callingRow As Long) As Double
    Dim wtPerFoot As Double

    Debug.Print "*** GetShapeWeight called for ShapeID: '" & shapeID & "', Length: '" & lengthStr & "', Called from Sheet: '" & callingSheetName & "', Row: " & callingRow

    Debug.Print "*** Checking condition - Sheet Name: '" & callingSheetName & "'"
    Debug.Print "*** Checking condition - Row Number: " & callingRow
    Debug.Print "*** Checking condition - ShapeID: '" & shapeID & "'"
    Debug.Print "*** Checking condition - UCase(Trim(ShapeID)): '" & UCase(Trim(shapeID)) & "'"

    If callingSheetName = "345KV SWITCH SUPPORT" And (callingRow = 11 Or callingRow = 12) And UCase(Trim(shapeID)) = "HSS10X10X1/2" Then
        Debug.Print "*** Debugging HSS10X10X1/2 on '345KV SWITCH SUPPORT' row " & callingRow & ":"
        Debug.Print "*** ShapeID (Len: " & Len(shapeID) & "): '" & shapeID & "'"
        Debug.Print "*** UCase(Trim(ShapeID)) (Len: " & Len(UCase(Trim(shapeID))) & "): '" & UCase(Trim(shapeID)) & "'"
        Dim dbSheet As Worksheet
        Set dbSheet = ThisWorkbook.Worksheets("Database v16.0")
        Dim foundRange As Range
        Set foundRange = dbSheet.Columns("C").Find(What:=UCase(Trim(shapeID)), LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False)
        If Not foundRange Is Nothing Then
            Debug.Print "*** Found in Database on row: " & foundRange.Row
            wtPerFoot = dbSheet.Cells(foundRange.Row, "E").Value
            Debug.Print "*** Weight Per Foot: " & wtPerFoot
        Else
            Debug.Print "*** NOT found in Database."
            wtPerFoot = 0
        End If
    Else
        On Error Resume Next
        wtPerFoot = Application.WorksheetFunction.VLookup(shapeID, Worksheets("Database v16.0").Range("C:E"), 3, False)
        On Error GoTo 0
    End If

    If wtPerFoot = 0 Then
        GetShapeWeight = 0
        Exit Function
    End If

    ' Convert length to feet
    Dim totalFeet As Double
    totalFeet = ParseMeasurementToFeet(lengthStr)
    Debug.Print "*** GetShapeWeight - Total Feet: " & totalFeet

    GetShapeWeight = wtPerFoot * totalFeet
End Function

Function ParseMeasurement(measureStr As String) As Double
    ' This function parses measurement strings like:
    ' "3/4"" -> 0.75 inches
    ' "6"" -> 6 inches
    ' "1'-3"" -> 15 inches (1 foot + 3 inches)
    
    Dim result As Double
    Dim temp As String
    
    ' Handle empty case
    If Len(Trim(measureStr)) = 0 Then
        ParseMeasurement = 0
        Exit Function
    End If
    
    ' Remove inch marks
    temp = Replace(measureStr, """", "")
    
    ' Handle feet-inches format like "1'-3"
    If InStr(temp, "'") > 0 Then
        Dim parts() As String
        parts = Split(temp, "'")
        
        ' Feet part
        result = Val(parts(0)) * 12
        
        ' Inch part (if exists)
        If UBound(parts) > 0 Then
            Dim inchPart As String
            inchPart = Trim(parts(1))
            
            ' Remove leading dash if present
            If Left(inchPart, 1) = "-" Then
                inchPart = Mid(inchPart, 2)
            End If
            
            result = result + ParseFractionOrDecimal(inchPart)
        End If
    Else
        ' Just inches (may be fractional)
        result = ParseFractionOrDecimal(temp)
    End If
    
    ParseMeasurement = result
End Function

Function ParseMeasurementToFeet(measureStr As String) As Double
    ' Convert measurement to feet
    Dim inches As Double
    inches = ParseMeasurement(measureStr)
    ParseMeasurementToFeet = inches / 12
End Function

Function ParseFractionOrDecimal(valueStr As String) As Double
    ' Parse values like: "6", "1/4", "6 1/2"
    Dim result As Double
    Dim parts() As String
    
    valueStr = Trim(valueStr)
    
    ' Handle mixed number like "6 1/2"
    If InStr(valueStr, " ") > 0 Then
        parts = Split(valueStr, " ")
        result = Val(parts(0)) + ParseFraction(parts(1))
    ' Handle fraction like "1/4"
    ElseIf InStr(valueStr, "/") > 0 Then
        result = ParseFraction(valueStr)
    ' Handle decimal like "6"
    Else
        result = Val(valueStr)
    End If
    
    ParseFractionOrDecimal = result
End Function

Function ParseFraction(fractionStr As String) As Double
    ' Parse fraction like "1/4" to 0.25
    Dim parts() As String
    Dim numerator As Double, denominator As Double
    
    If InStr(fractionStr, "/") > 0 Then
        parts = Split(fractionStr, "/")
        numerator = Val(parts(0))
        denominator = Val(parts(1))
        
        If denominator <> 0 Then
            ParseFraction = numerator / denominator
        Else
            ParseFraction = 0
        End If
    Else
        ParseFraction = Val(fractionStr)
    End If
End Function
Sub CalculateWeightsAllSheets()
    Dim ws As Worksheet
    Dim i As Long, rowStart As Long
    Dim shapeID As String, lengthStr As String
    Dim qty As Double, weightResult As Double
    Dim boltKeyword As String: boltKeyword = "BOLTS FOR ONE STRUCTURE"
    Dim boltStartRow As Long

    Application.ScreenUpdating = False

    For Each ws In ThisWorkbook.Worksheets
        Debug.Print "Processing Sheet: " & ws.Name
        rowStart = 4
        i = rowStart
        boltStartRow = 0

        If InStr(1, UCase(ws.Cells(1, 1).Value), "MATERIAL LIST") > 0 Then
            boltStartRow = FindBoltStartRow(ws)
            Debug.Print "Sheet: " & ws.Name & ", Bolt Start Row: " & boltStartRow

            Do While UCase(Trim(ws.Cells(i, "C").Value)) <> "BOLTS FOR ONE STRUCTURE" And i < 1000 ' Added a safety limit
                shapeID = Trim(ws.Cells(i, "C").Value)
                lengthStr = Trim(ws.Cells(i, "D").Value)
                qty = Val(ws.Cells(i, "B").Value)

                Debug.Print "Sheet: " & ws.Name & ", Processing row: " & i & ", ShapeID: '" & shapeID & "', Length: '" & lengthStr & "', Qty: " & qty

                ' --- Skip ONLY assembly description rows ---
                If UCase(shapeID) <> "COLUMN ASSEMBLY" And UCase(shapeID) <> "BEAM ASSEMBLY" Then
                    If UCase(Trim(shapeID)) <> boltKeyword And shapeID <> "" Then
                        Debug.Print "Sheet: " & ws.Name & ", Row: " & i & ", About to calculate weight for ShapeID: '" & shapeID & "'"
                        If Left(shapeID, 2) = "PL" Then
                            weightResult = GetPlateWeight(shapeID, lengthStr)
                            Debug.Print "Sheet: " & ws.Name & ", Row: " & i & ", Plate Weight Result: " & weightResult
                        Else
                            weightResult = GetShapeWeight(shapeID, lengthStr, ws.Name, i)
                            Debug.Print "Sheet: " & ws.Name & ", Row: " & i & ", Shape Weight Result: " & weightResult
                        End If
                        If weightResult <> 0 Then
                            ws.Cells(i, "F").Value = Round(weightResult * qty, 2)
                            Debug.Print "Sheet: " & ws.Name & ", Row: " & i & ", Weight written to F" & i & ": " & Round(weightResult * qty, 2)
                        End If
                    End If
                End If
                i = i + 1
            Loop

            If boltStartRow > 0 Then
                Debug.Print "Sheet: " & ws.Name & ", Starting bolt processing at row: " & boltStartRow
                ProcessBoltSection ws, boltStartRow
            End If
        End If
    Next ws

    Application.ScreenUpdating = True
    MsgBox "All material weights calculated in column F for applicable sheets!", vbInformation
End Sub
Sub ProcessBoltSection(ws As Worksheet, startRow As Long)
    Dim boltSheet As Worksheet
    Dim i As Long
    Dim qty As Long, weight As Double
    Dim boltType As String, lengthStr As String
    Dim diameter As String
    Dim boltLength As Double
    Dim diaColIndex As Integer
    Dim itemWeight As Double
    Dim washerRow As Long

    ' Set row value for washers (F436 washers)
    washerRow = 37

    ' Get bolt data sheet
    On Error Resume Next
    Set boltSheet = ThisWorkbook.Sheets("Bolt Data")
    If Err.Number <> 0 Then
        MsgBox "The 'Bolt Data' sheet is missing! Cannot calculate bolt weights.", vbExclamation
        Exit Sub
    End If
    On Error GoTo 0

    ' Start processing from the row after "BOLTS FOR ONE STRUCTURE"
    i = startRow + 1

    Do While Trim(ws.Cells(i, "C").Value) <> ""
        boltType = Trim(ws.Cells(i, "C").Value)
        qty = Val(ws.Cells(i, "B").Value)
        lengthStr = Trim(ws.Cells(i, "D").Value)
        diameter = ExtractDiameter(boltType)

        If diameter <> "" Then
            diaColIndex = FindDiameterColumn(boltSheet, diameter)
            If diaColIndex > 0 Then
                If InStr(UCase(boltType), "WASHER") > 0 Then
                    If IsNumeric(boltSheet.Cells(washerRow, diaColIndex).Value) Then
                        weight = boltSheet.Cells(washerRow, diaColIndex).Value
                        itemWeight = (qty * weight) / 100
                        ws.Cells(i, "F").Value = Round(itemWeight, 2)
                    Else
                        ws.Cells(i, "F").Value = 0
                    End If
                Else ' It's a bolt (nut weight is included)
                    If lengthStr <> "" Then
                        boltLength = ParseMeasurement(lengthStr)
                        lenRowIndex = FindLengthRow(boltSheet, boltLength)
                        If lenRowIndex > 0 Then
                            If IsNumeric(boltSheet.Cells(lenRowIndex, diaColIndex).Value) Then
                                weight = boltSheet.Cells(lenRowIndex, diaColIndex).Value
                                itemWeight = (qty * weight) / 100
                                ws.Cells(i, "F").Value = Round(itemWeight, 2)
                            Else
                                ws.Cells(i, "F").Value = 0
                            End If
                        Else
                            ws.Cells(i, "F").Value = 0
                        End If
                    Else
                        ws.Cells(i, "F").Value = 0
                    End If
                End If
            Else
                ws.Cells(i, "F").Value = 0
            End If
        Else
            ws.Cells(i, "F").Value = 0
        End If
        i = i + 1
    Loop
End Sub
Function ExtractDiameter(boltType As String) As String
    Dim diameter As String
    Dim startPos As Long, endPos As Long
    Dim i As Long

    ' Check for "DIA." pattern
    endPos = InStr(UCase(boltType), "DIA.")
    If endPos > 0 Then
        diameter = Trim(Left(boltType, endPos - 1))
        If Right(diameter, 1) = """" Then
            diameter = Left(diameter, Len(diameter) - 1)
        End If
        ExtractDiameter = diameter
        Exit Function
    End If

    ' Handle cases like "2" U-BOLT ASSEMBLY"
    If InStr(UCase(boltType), "U-BOLT") > 0 Then
        ' Attempt to extract the number at the beginning
        For i = 1 To Len(boltType)
            If IsNumeric(Mid(boltType, i, 1)) Then
                Dim j As Long
                Dim numPart As String
                For j = i To Len(boltType)
                    If Not IsNumeric(Mid(boltType, j, 1)) And Mid(boltType, j, 1) <> "." And Mid(boltType, j, 1) <> "-" And Mid(boltType, j, 1) <> "/" Then
                        Exit For
                    End If
                    numPart = numPart & Mid(boltType, j, 1)
                Next j
                ' Check if the next part is a quote (") or nothing
                Dim remainingPart As String
                remainingPart = Trim(Mid(boltType, j))
                If Left(remainingPart, 1) = """" Or remainingPart = "" Then
                    ExtractDiameter = numPart
                    Exit Function
                End If
                ' If not a quote, maybe the diameter is just the number
                ExtractDiameter = numPart
                Exit Function
            End If
        Next i
    End If

    ExtractDiameter = "" ' No diameter extracted
End Function
Function FindDiameterColumn(ws As Worksheet, dia As String) As Integer
    Dim i As Integer
    Dim colValue As String

    Debug.Print "--- Searching for Diameter: " & dia & " ---"
    For i = 3 To 12 ' Columns C to L, adjust range as needed
        colValue = Trim(ws.Cells(3, i).Value)
        colValue = Replace(colValue, """", "")
        dia = Replace(dia, """", "")
        Debug.Print "  Comparing: '" & colValue & "' (Column " & i & ") with '" & dia & "'"
        If colValue = dia Then
            FindDiameterColumn = i
            Debug.Print "  *** Diameter FOUND in Column: " & i & " ***"
            Exit Function
        End If
    Next i

    FindDiameterColumn = -1 ' Not found
    Debug.Print "  *** Diameter NOT found ***"
End Function
Function FindLengthRow(ws As Worksheet, lengthInInches As Double) As Integer
    Dim i As Integer
    Dim rowValue As String
    Dim rowLengthInInches As Double

    Debug.Print "--- Searching for Length (inches): " & lengthInInches & " ---"
    For i = 3 To 35 ' Rows 3-35 contain bolt length data
        rowValue = Trim(ws.Cells(i, 2).Value)
        If rowValue <> "" Then
            rowLengthInInches = ParseMeasurement(rowValue)
            Debug.Print "  Comparing: " & lengthInInches & " with '" & rowValue & "' (" & rowLengthInInches & " inches, Row " & i & ")"
            If Abs(lengthInInches - rowLengthInInches) < 0.05 Then
                FindLengthRow = i
                Debug.Print "  *** Length FOUND in Row: " & i & " ***"
                Exit Function
            End If
        End If
    Next i

    FindLengthRow = -1 ' Not found
    Debug.Print "  *** Length NOT found ***"
End Function
Function FindBoltStartRow(ws As Worksheet) As Long
    Dim i As Long
    For i = 1 To ws.Cells(ws.Rows.Count, "C").End(xlUp).Row
        If InStr(1, UCase(ws.Cells(i, "C").Value), "BOLTS FOR ONE STRUCTURE") > 0 Then
            FindBoltStartRow = i
            Exit Function
        End If
    Next i
    FindBoltStartRow = 0 ' Not found
End Function
Sub TestPlateWeights()
    Dim tests(1 To 5, 1 To 3) As String
    Dim results(1 To 5) As Double
    Dim msg As String
    Dim i As Long
    
    ' Set up test cases - (ShapeID, Length, ExpectedWeight)
    tests(1, 1) = "PL 1/4""X6"""       ' Row 5
    tests(1, 2) = "2'-0"""
    tests(1, 3) = "Expected: 57.4"
    
    tests(2, 1) = "PL 2'-0""X1/4"""    ' Example with feet in width
    tests(2, 2) = "2'-0"""
    tests(2, 3) = "Expected: 34.1"
    
    tests(3, 1) = "PL 6""X1/4"""       ' Example with just inches
    tests(3, 2) = "2'-0"""
    tests(3, 3) = "Expected: 10.2"
    
    tests(4, 1) = "PL 1'-2""X3/8"""    ' Example with feet-inches and fraction
    tests(4, 2) = "3'-6"""
    tests(4, 3) = "Expected: 55.4"
    
    tests(5, 1) = "PL 6""X1/2"""       ' Example with thicker plate
    tests(5, 2) = "4'-0"""
    tests(5, 3) = "Expected: 40.9"
    
    ' Run tests
    For i = 1 To 5
        results(i) = GetPlateWeight(tests(i, 1), tests(i, 2))
        msg = msg & "Test " & i & ": " & tests(i, 1) & " x " & tests(i, 2) & vbCrLf
        msg = msg & "Width: " & Mid(tests(i, 1), 3, InStr(UCase(tests(i, 1)), "X") - 3) & vbCrLf
        msg = msg & "Thickness: " & Mid(tests(i, 1), InStr(UCase(tests(i, 1)), "X") + 1) & vbCrLf
        msg = msg & "Length: " & tests(i, 2) & vbCrLf
        msg = msg & "Calculated Weight: " & Round(results(i), 2) & " lbs" & vbCrLf
        msg = msg & tests(i, 3) & vbCrLf & vbCrLf
    Next i
    
    MsgBox msg, vbInformation, "Plate Weight Test Results"
End Sub
Sub TestBoltWeightCalculation_TestSheet()
    Dim ws As Worksheet
    Dim msg As String

    ' Set the worksheet to "test"
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets("test")
    On Error GoTo 0

    If Not ws Is Nothing Then
        If InStr(1, UCase(ws.Cells(1, 1).Value), "MATERIAL LIST") > 0 Then
            Dim boltRow As Long
            boltRow = FindBoltStartRow(ws)

            If boltRow > 0 Then
                msg = "Testing bolt weights on sheet: " & ws.Name & vbCrLf & vbCrLf
                ProcessBoltSection ws, boltRow ' This will output debug info to the Immediate Window

                ' Display some results for verification in a message box
                Dim i As Long
                For i = boltRow + 1 To ws.Cells(ws.Rows.Count, "C").End(xlUp).Row
                    If Trim(ws.Cells(i, "C").Value) <> "" Then
                        msg = msg & "Row " & i & ":" & vbCrLf
                        msg = msg & "  Quantity: " & ws.Cells(i, "B").Value & vbCrLf
                        msg = msg & "  Bolt Type: " & ws.Cells(i, "C").Value & vbCrLf
                        msg = msg & "  Length: " & ws.Cells(i, "D").Value & vbCrLf
                        msg = msg & "  Calculated Weight: " & ws.Cells(i, "F").Value & " lbs" & vbCrLf & vbCrLf
                    End If
                Next i

                MsgBox msg, vbInformation, "Bolt Weight Test Results on 'test' Sheet"
            Else
                MsgBox "'BOLTS FOR ONE STRUCTURE' not found on the 'test' sheet!", vbExclamation
            End If
        Else
            MsgBox "'MATERIAL LIST' not found on the 'test' sheet!", vbExclamation
        End If
    Else
        MsgBox "The 'test' sheet was not found!", vbExclamation
    End If
End Sub

Sub DebugBoltSectionDetection()
    Dim ws As Worksheet
    Dim rowNum As Long
    For Each ws In ThisWorkbook.Sheets
        If ws.Name <> "Bolt Data" Then
            rowNum = FindBoltStartRow(ws)
            If rowNum > 0 Then
                MsgBox "Found 'BOLTS FOR ONE STRUCTURE' on sheet '" & ws.Name & "' at row " & rowNum
            Else
                MsgBox "'BOLTS FOR ONE STRUCTURE' not found on sheet '" & ws.Name & "'"
            End If
        End If
    Next ws
End Sub
