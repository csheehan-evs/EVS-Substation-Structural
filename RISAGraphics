import pyautogui
import time
import os

# Global settings
pyautogui.FAILSAFE = True
pyautogui.PAUSE = 0.1  # Reduced default pause

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def calibration_mode():
    print("==== CALIBRATION MODE ====")
    print("Move your mouse to important UI elements and note their coordinates.")
    print("Press Ctrl+C to exit calibration mode.\n")
    try:
        while True:
            x, y = pyautogui.position()
            print(f"X: {x} Y: {y}" + " " * 20, end='\r')
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("\n\nCalibration mode exited.")
        input("Press Enter to continue...")

def print_graphics_for_load_cases(num_cases, output_directory=None):
    if output_directory and not os.path.exists(output_directory):
        os.makedirs(output_directory)
        print(f"Created output directory: {output_directory}")
    elif output_directory and os.path.exists(output_directory) and os.listdir(output_directory):
        print(f"WARNING: Output directory '{output_directory}' is not empty. Existing files may be overwritten.")

    print(f"Starting automation for {num_cases} load cases...")
    print("Please ensure RISA 3D is open and in focus")
    print("Waiting 5 seconds before starting...")

    for i in range(5, 0, -1):
        print(f"Starting in {i}...", end='\r')
        time.sleep(1)

    pyautogui.hotkey('ctrl', 'p')
    time.sleep(1.0)  # Reduced delay after opening print dialog

    for case_num in range(1, num_cases + 1):
        clear_screen()
        print(f"=== Processing Basic Load Case {case_num}/{num_cases} ===")

        print(f"Step 1/2: Selecting BLC {case_num}...")
        pyautogui.click(x=1454, y=223)  # Click BLC dropdown
        time.sleep(0.5)
        if case_num > 1:
            pyautogui.press('down')
            time.sleep(0.5)
        pyautogui.press('enter')
        time.sleep(0.5)

        print("Step 2/2: Printing and saving PDF...")
        pyautogui.click(x=177, y=249)  # Click Print button
        time.sleep(4.2)  # Increased delay for print dialog

        if output_directory:
            time.sleep(0.1)
            pyautogui.hotkey('alt', 'd')
            time.sleep(0.1)
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.1)
            pyautogui.write(output_directory)
            time.sleep(0.1)
            pyautogui.press('enter')
            time.sleep(0.1)

        pyautogui.click(x=150, y=587)  # Click filename field
        time.sleep(0.1)
        pyautogui.hotkey('ctrl', 'a')
        time.sleep(0.1)
        pyautogui.press('backspace')
        time.sleep(0.1)
        pyautogui.write(str(case_num))
        time.sleep(0.1)

        pyautogui.click(x=882, y=688)  # Click Save
        time.sleep(0.3)  # Added delay after clicking Save

        pyautogui.click(x=1000, y=528)  # Click Overwrite confirmation
        time.sleep(0.3)  # Added delay after clicking Overwrite

        print(f"Completed Basic Load Case {case_num}/{num_cases}")
        print(f"Progress: {case_num}/{num_cases} ({case_num/num_cases*100:.1f}%)")

        if case_num < num_cases:
            time.sleep(0.5)  # Further reduced optional pause

    print("\nAll load cases processed!")
    print(f"PDFs saved to: {output_directory}")
    print("Script execution complete.")

if __name__ == "__main__":
    print("===========================================")
    print("RISA 3D PDF Export Automation Tool")
    print("===========================================")
    print("This script will automate exporting PDF graphics from RISA 3D.")
    print("Before running the automation, please ensure:")
    print("1. The target output folder is empty to avoid potential confusion or overwriting of unrelated files.")
    print("2. RISA 3D is open and the desired model is loaded.")
    print("3. Ensure that 'BLC 1: Dead Load' is the active load combination in the RISA 3D Graphics window.")
    print("4. Ensure the RISA 3D Graphics window is set to the desired view (e.g., plan, elevation, specific member view).")
    print("5. The RISA 3D window is located on your **left** screen. Your Bluebeam application can be on another screen.")
    print("===========================================")
    print("Options:")
    print("1. Run calibration mode (to find screen coordinates)")
    print("2. Run automation (export PDFs)")
    print("3. Exit")

    while True:
        choice = input("\nEnter your choice (1-3): ")

        if choice == '1':
            calibration_mode()
        elif choice == '2':
            try:
                num_cases = int(input("Enter number of load cases to process (default: 20): ") or "20")
                default_output_dir = r"Q:\General\Departments\Substation\Automation\Batch Output"
                output_dir = input(f"Enter output directory (default: {default_output_dir}): ") or default_output_dir

                print(f"\nReady to process {num_cases} load cases.")
                print(f"PDFs will be saved to: {output_dir}")
                confirm = input("Proceed? (y/n): ")

                if confirm.lower() == 'y':
                    print_graphics_for_load_cases(num_cases, output_dir)
                else:
                    print("Operation cancelled.")
            except ValueError:
                print("Invalid input. Please enter a number for load cases.")
        elif choice == '3':
            print("Exiting program.")
            break
        else:
            print("Invalid choice. Please enter 1, 2, or 3.")

    print("\nNote: If the automation doesn't work correctly, move your mouse to the upper-left corner to stop it.")
